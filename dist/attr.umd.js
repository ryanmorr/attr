/*! @ryanmorr/attr v0.1.0 | https://github.com/ryanmorr/attr */function _typeof2(a){return _typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof2(a)}(function(a,b){"object"===("undefined"==typeof exports?"undefined":_typeof2(exports))&&"undefined"!=typeof module?module.exports=b():"function"==typeof define&&define.amd?define(b):(a=a||self,a.attr=b())})(this,function(){'use strict';function a(b){return a="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(a){return _typeof2(a)}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":_typeof2(a)},a(b)}function b(b){return"object"===a(b)?JSON.stringify(b):b}function c(a){if("true"===a)return!0;if("false"===a)return!1;if("null"===a)return null;if("undefined"!==a){if(a===+a+"")return+a;if(f.test(a))try{return JSON.parse(a)}catch(a){// eslint-disable no-empty
}return a}}function d(a,b,d){if("class"===b||"className"===b)return a.getAttribute("class");if("style"===b)return a.style.cssText.split(";").reduce(function(a,b){if(b){var c=b.split(":");a[c[0].trim()]=c[1].trim()}return a},{});if("data"===b||"dataset"===b){var e={};for(var f in a.dataset)e[f]=c(a.dataset[f]);return e}return!d&&b in a?a[b]:a.getAttribute(b)}function e(c,f,h){if("object"===a(f))return Object.keys(f).forEach(function(a){return e(c,a,f[a])});if(f.startsWith("on"))return void c.addEventListener(f.slice(2).toLowerCase(),h);var i=c instanceof SVGElement;if("function"==typeof h&&(h=h(c,d(c,f,i))),("class"===f||"className"===f)&&Array.isArray(h)&&(h=h.join(" ")),"style"===f){if("string"==typeof h)c.style.cssText=h;else for(var k in h){var l=null==h[k]?"":h[k];"number"==typeof l&&!1===g.test(k)&&(l+="px"),k.includes("-")?c.style.setProperty(k,l):c.style[k]=l}}else if("data"===f||"dataset"===f)for(var m in h)c.dataset[m]=b(h[m]);else!i&&"form"!==f&&"list"!==f&&f in c?c[f]=null==h?"":h:null==h||!1===h?c.removeAttribute(f):i&&f in j?c.setAttributeNS(j[f],f,h):c.setAttribute(f,h)}var f=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,g=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord/i,h="http://www.w3.org/1999/xlink",i="http://www.w3.org/XML/1998/namespace",j={"xlink:actuate":h,"xlink:arcrole":h,"xlink:href":h,"xlink:role":h,"xlink:show":h,"xlink:title":h,"xlink:type":h,"xml:base":i,"xml:lang":i,"xml:space":i};return e});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
